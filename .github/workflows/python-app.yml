# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Build

on:
  push:
    branches: [ "dev" ]
  pull_request:
    branches: [ "dev" ]

permissions:
  contents: read

jobs:
  static-lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python 3.9
      uses: actions/setup-python@v3
      with:
        python-version: "3.9"
    - name: Install Lint dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest poetry codespell cpplint poethepoet isort
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    - name: Lint with isort
      run: |
        isort --profile black . -p=buffalo --skip=3rd/ --skip=docs/ --skip=build/ --skip=tests --skip=.pyx --check-only

    - name: Lint with flake8 for .py
      run: |
        flake8 ./ --filename='*.py' --ignore=E402,E501,E731,E741 --exclude=__init__.py,setup.py,3rd/,build/

    - name: Lint with flake8 for .pyx
      run: |
        flake8 buffalo ./ --filename='*.pyx' --ignore=E225,E226,E227,E402,E501,E741,E901,E999 --exclude=__init__.py,3rd/,build/

    - name: Lint with cpplint
      run: |
        cpplint --linelength=140 --headers=hpp,h --extensions=cc,cpp \
        --filter=-runtime/int,-build/include_subdir,-legal/copyright,-readability/namespace,-readability/todo,-build/namespaces,-whitespace/comments,-readability/casting,-runtime/references,-whitespace/braces,-whitespace/forcolon,-build/include_order,-build/c++11 \
        --exclude=include/buffalo/cuda/als/als.hpp \
        --exclude=include/buffalo/cuda/bpr/bpr.hpp \
        --recursive ./lib ./include
 #brought from https://github.com/benfred/implicit/blob/main/.github/workflows/build.yml
  build-wheels:
    needs: [static-lint]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        # TODO(ita9naiwa): Support macOS, WinOS
        os: [ubuntu-latest]
        python-version: [38, 39, 310, 311]
        cibw-arch: [auto, aarch64]
        exclude:
          - os: macos-latest
            cibw-arch: aarch64
          - os: windows-latest
            cibw-arch: aarch64

    steps:
      - uses: actions/checkout@v3
      - name: Set up QEMU
        if: runner.os == 'Linux'
        uses: docker/setup-qemu-action@v2
        with:
          platforms: all
      
      - name: setup 3rd party modules
        run: git submodule update --init --recursive
      
      - name: Build wheels
        uses: pypa/cibuildwheel@v2.11.3
        env:
          CIBW_BEFORE_BUILD: pip3 install cmake --upgrade
          CIBW_BUILD: cp${{matrix.python-version}}-*
          CIBW_ARCHS_LINUX: ${{ matrix.cibw-arch }}

      - name: Rename Wheels
        run: |
          python ci/rename_wheels.py
        if: runner.os == 'Linux'

      - name: Upload Binaries
        uses: actions/upload-artifact@v3
        with:
          name: wheels
          path: wheelhouse
    
        
